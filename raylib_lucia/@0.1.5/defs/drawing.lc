private final begin_drawing_c: &int = libload.get_fn(lib, "BeginDrawing", [], "void")
private final clear_background_c: &int = libload.get_fn(lib, "ClearBackground", ["ptr"], "void")
private final end_drawing_c: &int = libload.get_fn(lib, "EndDrawing", [], "void")
private final draw_rectangle_c: &int = libload.get_fn(lib, "DrawRectangle", ["int", "int", "int", "int", "ptr"], "void")
private final draw_rectangle_lines_c: &int = libload.get_fn(lib, "DrawRectangleLines", ["int", "int", "int", "int", "ptr"], "void")
private final draw_pixel_c: &int = libload.get_fn(lib, "DrawPixel", ["int", "int", "ptr"], "void")
private final draw_line_c: &int = libload.get_fn(lib, "DrawLine", ["int", "int", "int", "int", "ptr"], "void")
private final draw_circle_c: &int = libload.get_fn(lib, "DrawCircle", ["int", "int", "float", "ptr"], "void")
private final draw_circle_lines_c: &int = libload.get_fn(lib, "DrawCircleLines", ["int", "int", "float", "ptr"], "void")

public final fun begin_drawing() -> void:
    /// Begins drawing to the window.
    ///     @return: void - No return value.
    if (begin_drawing_c == null):
        throw "Function 'begin_drawing' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(begin_drawing_c, [])
    return null
end

public final fun end_drawing() -> void:
    /// Ends drawing to the window.
    ///     @return: void - No return value.
    if (end_drawing_c == null):
        throw "Function 'end_drawing' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(end_drawing_c, [])
    return null
end

public final fun clear_background(color: tuple[int; 4]) -> void:
    /// Clears the background with the specified color.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (clear_background_c == null):
        throw "Function 'clear_background' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a tuple of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(clear_background_c, [_color])
    return null
end

public final fun draw_rectangle(
    pos_x: int,
    pos_y: int,
    width: int,
    height: int,
    color: tuple[int; 4],
) -> void:
    /// Draws a rectangle on the screen at the specified position, size, and color.
    ///     @param pos_x: int - The x position to draw the rectangle.
    ///     @param pos_y: int - The y position to draw the rectangle.
    ///     @param width: int - The width of the rectangle.
    ///     @param height: int - The height of the rectangle.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_rectangle_c == null):
        throw "Function 'draw_rectangle' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_rectangle_c, [pos_x, pos_y, width, height, _color])
    return null
end

public final fun draw_rectangle_lines(
    pos_x: int,
    pos_y: int,
    width: int,
    height: int,
    color: tuple[int; 4],
) -> void:
    /// Draws the outline of a rectangle on the screen at the specified position, size, and color.
    ///     @param pos_x: int - The x position to draw the rectangle outline.
    ///     @param pos_y: int - The y position to draw the rectangle outline.
    ///     @param width: int - The width of the rectangle outline.
    ///     @param height: int - The height of the rectangle outline.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_rectangle_lines_c == null):
        throw "Function 'draw_rectangle_lines' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_rectangle_lines_c, [pos_x, pos_y, width, height, _color])
    return null
end

public final fun draw_pixel(
    pos_x: int,
    pos_y: int,
    color: tuple[int; 4],
) -> void:
    /// Draws a pixel on the screen at the specified position and color.
    ///     @param pos_x: int - The x position to draw the pixel.
    ///     @param pos_y: int - The y position to draw the pixel.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_pixel_c == null):
        throw "Function 'draw_pixel' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_pixel_c, [pos_x, pos_y, _color])
    return null
end

public final fun draw_line(
    start_x: int,
    start_y: int,
    end_x: int,
    end_y: int,
    color: tuple[int; 4],
) -> void:
    /// Draws a line on the screen from the start position to the end position with the specified color.
    ///     @param start_x: int - The x position of the start of the line.
    ///     @param start_y: int - The y position of the start of the line.
    ///     @param end_x: int - The x position of the end of the line.
    ///     @param end_y: int - The y position of the end of the line.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_line_c == null):
        throw "Function 'draw_line' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_line_c, [start_x, start_y, end_x, end_y, _color])
    return null
end

public final fun draw_circle(
    center_x: int,
    center_y: int,
    radius: float,
    color: tuple[int; 4],
) -> void:
    /// Draws a filled circle on the screen at the specified position, radius, and color.
    ///     @param center_x: int - The x position of the center of the circle.
    ///     @param center_y: int - The y position of the center of the circle.
    ///     @param radius: float - The radius of the circle.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_circle_c == null):
        throw "Function 'draw_circle' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_circle_c, [center_x, center_y, radius, _color])
    return null
end

public final fun draw_circle_lines(
    center_x: int,
    center_y: int,
    radius: float,
    color: tuple[int; 4],
) -> void:
    /// Draws the outline of a circle on the screen at the specified position, radius, and color.
    ///     @param center_x: int - The x position of the center of the circle.
    ///     @param center_y: int - The y position of the center of the circle.
    ///     @param radius: float - The radius of the circle.
    ///     @param color: tuple[int; 4] - A tuple of 4 integers representing RGBA color (0-255).
    ///     @return: void - No return value.
    if (draw_circle_lines_c == null):
        throw "Function 'draw_circle_lines' not found in the loaded library." from "FunctionNotFoundError"
    end
    if (len(color) != 4):
        throw "Color must be a list of 4 integers (RGBA)." from "ValueError"
    end
    for (c in color):
        if (c < 0 || c > 255):
            throw "Color values must be in the range 0-255." from "ValueError"
        end
    end
    _color := libload.create_struct([color[0], color[1], color[2], color[3]], ["byte", "byte", "byte", "byte"])
    if (_color == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(draw_circle_lines_c, [center_x, center_y, radius, _color])
    return null
end

public final BeginDrawing: &int = begin_drawing
public final EndDrawing: &int = end_drawing
public final ClearBackground: &int = clear_background
public final DrawRectangle: &int = draw_rectangle
public final DrawRectangleLines: &int = draw_rectangle_lines
public final DrawPixel: &int = draw_pixel
public final DrawLine: &int = draw_line
public final DrawCircle: &int = draw_circle
public final DrawCircleLines: &int = draw_circle_lines
