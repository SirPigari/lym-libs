private final get_random_value_c: &int = libload.get_fn(lib, "GetRandomValue", ["int", "int"], "int")
private final set_random_seed_c: &int = libload.get_fn(lib, "SetRandomSeed", ["int"], "void")
private final set_target_fps_c: &int = libload.get_fn(lib, "SetTargetFPS", ["int"], "void")
private final get_fps_c: &int = libload.get_fn(lib, "GetFPS", [], "int")
private final get_frame_time_c: &int = libload.get_fn(lib, "GetFrameTime", [], "float")
private final get_time_c: &int = libload.get_fn(lib, "GetTime", [], "float")
private final enable_event_waiting_c: &int = libload.get_fn(lib, "EnableEventWaiting", [], "void")
private final disable_event_waiting_c: &int = libload.get_fn(lib, "DisableEventWaiting", [], "void")
private final trace_log_c: &int = libload.get_fn(lib, "TraceLog", ["int", "str"], "void")
private final set_trace_log_level_c: &int = libload.get_fn(lib, "SetTraceLogLevel", ["int"], "void")
private final swap_screen_buffer_c: &int = libload.get_fn(lib, "SwapScreenBuffer", [], "void")
private final poll_input_events_c: &int = libload.get_fn(lib, "PollInputEvents", [], "void")
private final wait_time_c: &int = libload.get_fn(lib, "WaitTime", ["float64"], "void")
private final take_screenshot_c: &int = libload.get_fn(lib, "TakeScreenshot", ["str"], "void")
private final open_url_c: &int = libload.get_fn(lib, "OpenURL", ["str"], "void")

public final LOG_ALL: int     = 0      // Display all logs
public final LOG_TRACE: int   = 1      // Trace logging, intended for internal use only
public final LOG_DEBUG: int   = 2      // Debug logging, used for internal debugging, it should be disabled on release builds
public final LOG_INFO: int    = 3      // Info logging, used for program execution info
public final LOG_WARNING: int = 4      // Warning logging, used on recoverable failures
public final LOG_ERROR: int   = 5      // Error logging, used on unrecoverable failures
public final LOG_FATAL: int   = 6      // Fatal logging, used to abort program: exit(EXIT_FAILURE)
public final LOG_NONE: int    = 7      // Disable logging

public final fun get_random_value(min: int, max: int) -> int:
    /// Returns a random integer value between min and max (inclusive).
    ///     @param min: int - The minimum value.
    ///     @param max: int - The maximum value.
    ///     @return: int - A random integer between min and max.
    if (get_random_value_c == null):
        throw "Function 'get_random_value' not found in the loaded library." from "FunctionNotFoundError"
    end
    result: int = libload.call_fn(get_random_value_c, [min, max])
    return result
end

public final fun set_random_seed(seed: int) -> void:
    /// Sets the seed for the random number generator.
    ///     @param seed: int - The seed value.
    ///     @return: void - No return value.
    if (set_random_seed_c == null):
        throw "Function 'set_random_seed' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(set_random_seed_c, [seed])
    return null
end

public final fun set_target_fps(fps: int) -> void:
    /// Sets the target frames-per-second (FPS) for the application.
    ///     @param fps: int - The desired FPS.
    ///     @return: void - No return value.
    if (set_target_fps_c == null):
        throw "Function 'set_target_fps' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(set_target_fps_c, [fps])
    return null
end

public final fun get_fps() -> int:
    /// Returns the current frames-per-second (FPS).
    ///     @return: int - The current FPS.
    if (get_fps_c == null):
        throw "Function 'get_fps' not found in the loaded library." from "FunctionNotFoundError"
    end
    result: int = libload.call_fn(get_fps_c, [])
    return result
end

public final fun get_frame_time() -> float:
    /// Returns the time in seconds for the last frame drawn.
    ///     @return: float - The time in seconds for the last frame.
    if (get_frame_time_c == null):
        throw "Function 'get_frame_time' not found in the loaded library." from "FunctionNotFoundError"
    end
    result: float = libload.call_fn(get_frame_time_c, [])
    return result
end

public final fun get_time() -> float:
    /// Returns the total time in seconds since the window was initialized.
    ///     @return: float - The total time in seconds since InitWindow.
    if (get_time_c == null):
        throw "Function 'get_time' not found in the loaded library." from "FunctionNotFoundError"
    end
    result: float = libload.call_fn(get_time_c, [])
    return result
end

public final fun enable_event_waiting() -> void:
    /// Enables event waiting mode.
    ///     @return: void - No return value.
    if (enable_event_waiting_c == null):
        throw "Function 'enable_event_waiting' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(enable_event_waiting_c, [])
    return null
end

public final fun disable_event_waiting() -> void:
    /// Disables event waiting mode.
    ///     @return: void - No return value.
    if (disable_event_waiting_c == null):
        throw "Function 'disable_event_waiting' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(disable_event_waiting_c, [])
    return null
end

public final fun trace_log(log_level: int, text: str) -> void:
    /// Logs a message with the specified log level.
    ///     @param log_level: int - The log level (e.g., LOG_DEBUG, LOG_INFO).
    ///     @param text: str - The message to log.
    ///     @return: void - No return value.
    if (trace_log_c == null):
        throw "Function 'trace_log' not found in the loaded library." from "FunctionNotFoundError"
    end
    _text: &int = libload.create_str_ptr(text)
    if (_text == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(trace_log_c, [log_level, _text])
    return null
end

public final fun set_trace_log_level(log_level: int) -> void:
    /// Sets the minimum log level for messages to be logged.
    ///     @param log_level: int - The minimum log level (e.g., LOG_DEBUG, LOG_INFO).
    ///     @return: void - No return value.
    if (set_trace_log_level_c == null):
        throw "Function 'set_trace_log_level' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(set_trace_log_level_c, [log_level])
    return null
end

public final fun swap_screen_buffer() -> void:
    /// Swaps the back buffer with the front buffer (screen drawing).
    ///     @return: void - No return value.
    if (swap_screen_buffer_c == null):
        throw "Function 'swap_screen_buffer' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(swap_screen_buffer_c, [])
    return null
end

public final fun poll_input_events() -> void:
    /// Registers all input events.
    ///     @return: void - No return value.
    if (poll_input_events_c == null):
        throw "Function 'poll_input_events' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(poll_input_events_c, [])
    return null
end

public final fun wait_time(seconds: float) -> void:
    /// Waits for the specified time in seconds (halts program execution).
    ///     @param seconds: float - The time to wait in seconds.
    ///     @return: void - No return value.
    if (wait_time_c == null):
        throw "Function 'wait_time' not found in the loaded library." from "FunctionNotFoundError"
    end
    libload.call_fn(wait_time_c, [seconds])
    return null
end

public final fun take_screenshot(file_name: str) -> void:
    /// Takes a screenshot of the current screen and saves it to the specified file.
    ///     @param file_name: str - The name of the file to save the screenshot (extension defines format).
    ///     @return: void - No return value.
    if (take_screenshot_c == null):
        throw "Function 'take_screenshot' not found in the loaded library." from "FunctionNotFoundError"
    end
    _file_name: &int = libload.create_str_ptr(file_name)
    if (_file_name == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(take_screenshot_c, [_file_name])
    return null
end

public final fun open_url(url: str) -> void:
    /// Opens the specified URL in the default web browser.
    ///     @param url: str - The URL to open.
    ///     @return: void - No return value.
    if (open_url_c == null):
        throw "Function 'open_url' not found in the loaded library." from "FunctionNotFoundError"
    end
    _url: &int = libload.create_str_ptr(url)
    if (_url == null):
        throw "Invalid pointer: null" from "PointerError"
    end
    libload.call_fn(open_url_c, [_url])
    return null
end


public final GetRandomValue: function = get_random_value
public final SetRandomSeed: function = set_random_seed
public final SetTargetFPS: function = set_target_fps
public final GetFPS: function = get_fps
public final GetFrameTime: function = get_frame_time
public final GetTime: function = get_time
public final EnableEventWaiting: function = enable_event_waiting
public final DisableEventWaiting: function = disable_event_waiting
public final TraceLog: function = trace_log
public final SetTraceLogLevel: function = set_trace_log_level
public final SwapScreenBuffer: function = swap_screen_buffer
public final PollInputEvents: function = poll_input_events
public final WaitTime: function = wait_time
public final TakeScreenshot: function = take_screenshot
public final OpenURL: function = open_url
